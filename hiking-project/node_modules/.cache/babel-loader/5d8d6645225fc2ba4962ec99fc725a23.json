{"ast":null,"code":"function haversine_distance(coords1, coords2) {\n  function toRad(x) {\n    return x * Math.PI / 180;\n  }\n\n  var dLat = toRad(coords2.latitude - coords1.latitude);\n  var dLon = toRad(coords2.longitude - coords1.longitude);\n  var a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(toRad(coords1.latitude)) * Math.cos(toRad(coords2.latitude)) * Math.sin(dLon / 2) * Math.sin(dLon / 2);\n  return 12742 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n}\n\nconsole.log(haversine_distance([-25.3, 25.3], [50.3, -50.3]));","map":{"version":3,"sources":["C:/Users/ethan/OneDrive/Desktop/Files/Classes/CS380/Hiking Project/Hiking-Project/hiking-project/src/scripts/haversine.js"],"names":["haversine_distance","coords1","coords2","toRad","x","Math","PI","dLat","latitude","dLon","longitude","a","sin","cos","atan2","sqrt","console","log"],"mappings":"AAAA,SAASA,kBAAT,CAA4BC,OAA5B,EAAqCC,OAArC,EAA8C;AAE1C,WAASC,KAAT,CAAeC,CAAf,EAAkB;AACd,WAAOA,CAAC,GAAGC,IAAI,CAACC,EAAT,GAAc,GAArB;AACJ;;AAEH,MAAIC,IAAI,GAAGJ,KAAK,CAACD,OAAO,CAACM,QAAR,GAAmBP,OAAO,CAACO,QAA5B,CAAhB;AACA,MAAIC,IAAI,GAAGN,KAAK,CAACD,OAAO,CAACQ,SAAR,GAAoBT,OAAO,CAACS,SAA7B,CAAhB;AAEA,MAAIC,CAAC,GAAGN,IAAI,CAACO,GAAL,CAASL,IAAI,GAAG,CAAhB,IAAqBF,IAAI,CAACO,GAAL,CAASL,IAAI,GAAG,CAAhB,CAArB,GACAF,IAAI,CAACQ,GAAL,CAASV,KAAK,CAACF,OAAO,CAACO,QAAT,CAAd,IACAH,IAAI,CAACQ,GAAL,CAASV,KAAK,CAACD,OAAO,CAACM,QAAT,CAAd,CADA,GAEAH,IAAI,CAACO,GAAL,CAASH,IAAI,GAAG,CAAhB,CAFA,GAEqBJ,IAAI,CAACO,GAAL,CAASH,IAAI,GAAG,CAAhB,CAH7B;AAKA,SAAO,QAAQJ,IAAI,CAACS,KAAL,CAAWT,IAAI,CAACU,IAAL,CAAUJ,CAAV,CAAX,EAAyBN,IAAI,CAACU,IAAL,CAAU,IAAIJ,CAAd,CAAzB,CAAf;AACA;;AAEDK,OAAO,CAACC,GAAR,CAAYjB,kBAAkB,CAAC,CAAC,CAAC,IAAF,EAAO,IAAP,CAAD,EAAe,CAAC,IAAD,EAAM,CAAC,IAAP,CAAf,CAA9B","sourcesContent":["function haversine_distance(coords1, coords2) {\r\n\r\n    function toRad(x) {\r\n        return x * Math.PI / 180;\r\n   }\r\n\r\n var dLat = toRad(coords2.latitude - coords1.latitude);\r\n var dLon = toRad(coords2.longitude - coords1.longitude)\r\n\r\n var a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +\r\n         Math.cos(toRad(coords1.latitude)) * \r\n         Math.cos(toRad(coords2.latitude)) *\r\n         Math.sin(dLon / 2) * Math.sin(dLon / 2);\r\n\r\n return 12742 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n}\r\n\r\nconsole.log(haversine_distance([-25.3,25.3], [50.3,-50.3]));"]},"metadata":{},"sourceType":"module"}